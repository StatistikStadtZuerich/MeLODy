openapi: 3.1.0
info:
  title: 'SSZ ChatGPT Prototype'
  version: 1.0.0
  description: 'API description'
servers:
  - url: 'https://d091-89-26-109-33.ngrok-free.app/api/v2'
    description: 'API server'
paths:
  /apartments:
    post:
      summary: 'Filter and group apartment data'
      operationId: filterAndGroupApartmentData
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/ApartmentDataRequest' } } } }
      responses: { '200': { description: 'Filtered and optionally grouped apartment data', content: { application/json: { schema: { $ref: '#/components/schemas/DataResponse' } } } }, '404': { description: 'No data found for the specified parameters', content: { application/json: { schema: { type: object, properties: { error: { type: string, example: 'No data found for the specified parameters' } } } } } } }
  /demographics:
    post:
      summary: 'Retrieve demographic data for gender, nationality, quarter, age and more.'
      operationId: getDemographicData
      requestBody: { '200': { description: 'Successfully retrieved and grouped demographic data', content: { application/json: { schema: { $ref: '#/components/schemas/DataResponse' } } } }, '404': { description: 'No data found for the specified parameters or no groupBy specified' }, content: { application/json: { schema: { $ref: '#/components/schemas/DemographicDataRequestQueryFilter' } } } }
  /employment:
    post:
      summary: 'Filter and group employment data'
      description: 'Filters the employment data based on various parameters and groups the data if specified.'
      operationId: employmentData
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/EmploymentDataRequest' } } } }
      responses: { '200': { description: 'Successful response with filtered (and possibly grouped) data.', content: { application/json: { schema: { $ref: '#/components/schemas/DataResponse' } } } }, '404': { description: 'No data found for the specified parameters.' } }
  /income:
    post:
      summary: 'Retrieve grouped income data based on filters and grouping parameters'
      operationId: postIncomeData
      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/IncomeDataRequest' } } } }
      responses: { '200': { description: 'A grouped set of income data', content: { application/json: { schema: { $ref: '#/components/schemas/DataResponse' } } } }, '404': { description: 'No data found for the specified parameters or no subroutes specified' } }
  /mietpreise:
    post:
      summary: 'Fetch and filter Mietpreis data'
      description: 'Fetches Mietpreis data based on the given filter criteria and optionally groups the data.'
      operationId: fetchMietpreisData
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/MietpreisDataRequest' } } } }
      responses: { '200': { description: 'Successful response with Mietpreis data.', content: { application/json: { schema: { $ref: '#/components/schemas/DataResponse' } } } }, '404': { description: 'No data found for the specified parameters.' } }
  /population:
    get:
      summary: 'Retrieve population data'
      description: 'Retrieve overall population numbers with optional filtering by year range (year, startYear, endYear) and population range (minPopulation, maxPopulation).'
      operationId: getPopulationNumbers
      parameters: [ { in: query, name: year, schema: { type: string } }, { in: query, name: startYear, schema: { type: string } }, { in: query, name: endYear, schema: { type: string } }, { in: query, name: minPopulation, schema: { type: integer } }, { in: query, name: maxPopulation, schema: { type: integer } } ]
      responses: { '200': { description: 'A list of population data', content: { application/json: { schema: { $ref: '#/components/schemas/DataResponse' } } } }, '404': { description: 'No data found for the specified parameters' } }
components:
  schemas:
    DataResponse:
      type: object
      description: 'Response format data queries'
      properties: { result: { type: object, additionalProperties: { type: object }, description: 'The grouped data' }, keys: { type: array, items: { type: string }, description: 'The keys used for grouping the data' }, total: { type: integer, description: 'The total number of records found' }, source: { type: string, description: 'The source of the data' } }
    PopulationData:
      type: object
      properties: { Jahr: { type: string, description: 'The year of the population data' }, Wirtschaftliche_Wohnbevoelkerung: { type: integer, description: 'The number of people' } }
      required: [ Jahr, Wirtschaftliche_Wohnbevoelkerung ]
    ApartmentDataRequest:
      type: object
      description: 'Filter options for apartment data queries including time range, location, room specifications, ownership type, apartment count, and grouping dimensions.'
      properties: { startYear: { type: integer, example: 2020 }, endYear: { type: integer, example: 2025 }, year: { type: integer, example: 2021 }, quar: { type: string, example: Rathaus }, minRooms: { type: integer, minimum: 1 }, maxRooms: { type: integer, minimum: 1 }, rooms: { type: integer, minimum: 1 }, owner: { type: string, enum: [ 'Öffentliche Hand', 'Übrige private Gesellschaften', 'Natürliche Personen', 'Im Stockwerkeigentum', Wohnbaugenossenschaften ], example: 'Natürliche Personen' }, numberOfApartments: { type: integer, minimum: 1 }, groupBy: { type: array, items: { type: string, enum: [ Datum_nach_Jahr, Stadtquartier, Zimmerzahl, Eigentumsart, Bauperiode, Miete_oder_Eigentum, Anzahl_Wohnungen ] }, example: [ Datum_nach_Jahr, Stadtquartier ] } }
    DemographicDataRequestQueryFilter:
      type: object
      description: 'Filter options for demographic data queries including time range, demographic characteristics, location, and population metrics. Supports grouping results by various dimensions.'
      properties: { startYear: { type: integer, example: 2000 }, endYear: { type: integer, example: 2020 }, year: { type: integer, example: 2010 }, geschlecht: { type: string, example: männlich }, alter: { type: string, example: 20-24 }, stadtquartier: { type: string, example: Fluntern }, heimatland: { type: string, example: Schweiz }, minWirtschaftlicheWohnbevoelkerung: { type: number, example: 100 }, maxWirtschaftlicheWohnbevoelkerung: { type: number, example: 1000 }, groupBy: { type: array, items: { type: string }, example: [ Datum_nach_Jahr, Geschlecht ], enum: [ Datum_nach_Jahr, Stadtquartier, Alter, Heimatland, Geschlecht, Wirtschaftliche_Wohnbevoelkerung ] } }
    EmploymentDataRequest:
      type: object
      description: 'Filter options for employment data queries including time range parameters and grouping dimensions.'
      properties: { startDate: { type: integer, example: 2000 }, endDate: { type: integer, example: 2020 }, date: { type: integer, example: 2010 }, groupBy: { type: array, items: { type: string, enum: [ year, allEmployed, fullTime ] }, example: [ year, fullTime ] } }
    IncomeDataRequest:
      type: object
      properties: { startYear: { type: integer, description: 'Start year for the income data' }, endYear: { type: integer, description: 'End year for the income data' }, year: { type: integer, description: 'Specific year for the income data' }, district: { type: string, description: 'District/quarter name (Stadtquartier)' }, householdType: { type: string, description: 'Type of household (Haushaltstyp)' }, medianIncome: { type: number, description: 'Median equivalent household income in 1000 CHF' }, groupBy: { type: array, items: { type: string, enum: [ year, district, householdType, medianIncome ] }, description: 'Group by criteria' } }
    MietpreisDataRequest:
      type: object
      description: 'Filter options for rental price data queries including time ranges, area specifications, room configurations, property types, and grouping dimensions.'
      properties: { startYear: { type: integer, example: 2020 }, endYear: { type: integer, example: 2021 }, year: { type: integer, example: 2022 }, areaType: { type: string, enum: [ 'Ganze Stadt', Stadtkreise, Stadtquartiere, 'Statistische Quartiere' ], example: 'Ganze Stadt' }, minNumberOfRooms: { type: integer, example: 2, minimum: 1 }, maxNumberOfRooms: { type: integer, minimum: 1 }, numberOfRooms: { type: integer, minimum: 1 }, gemein: { type: string, enum: [ Gemeinnützig, 'Nicht gemeinnützig' ], example: Gemeinnützig }, groupBy: { type: array, items: { type: string, enum: [ StichtagDatJahr, StichtagDatMonat, RaumeinheitLang, ZimmerLang, GemeinnuetzigLang, mean, qu25, qu50, qu75 ] }, example: [ StichtagDatJahr, ZimmerSort ] } }
tags: [ ]
